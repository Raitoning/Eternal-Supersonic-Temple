package yal.analyse;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expression.* ;
import yal.arbre.instruction.*;
import yal.arbre.instruction.fonction.*;
import yal.exceptions.AnalyseSyntaxiqueException;
import yal.tds.*;

import java_cup.runtime.*;

action code {:
             :};

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.ECRIRE), "ecrire") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;
        lesTerminaux.put(new Integer(CodesLexicaux.TANTQUE), "tantque") ;
        lesTerminaux.put(new Integer(CodesLexicaux.REPETER), "repeter") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FINTANTQUE), "fintantque") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1));
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1));
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value);
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value);
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym)));
            }
            else {
                m.append(" expression non termin√©e");
            }

        }
        throw new AnalyseSyntaxiqueException("" + m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol     LIRE, ECRIRE, PLUS, MOINS, MULT, DIV, PAROUV, PARFER ;
terminal Symbol     SI, FSI, ALORS, SINON, SUP, INF, EGALEGAL, DIFF, ET, OU, NON ;
terminal Symbol     VIRGULE, POINTVIRGULE, PROGRAMME, DEBUT, FIN, ENTIER, EGAL;
terminal Symbol     TANTQUE, REPETER, FINTANTQUE, FONCTION, RETOURNE;

terminal String     CONSTANTEINT, CONSTANTEBOOL, CHAINE, IDF;

/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait CONDITION, PROG, LINSTR, LINSTRF, INSTR, INSTRF, LISDECL, LISDECLF, DECL, AFF, BOUCLE, DECL_FONCTION;
non terminal Expression EXPR, CSTE;
non terminal String TCHAINE;
non terminal ArrayList<Expression> PARAMETRES;
non terminal ArrayList<String> PARAMETRESDECL;

precedence left OU;
precedence left ET;
precedence left EGALEGAL, DIFF;
precedence left INF, SUP;
precedence left PLUS, MOINS;
precedence left MULT, DIV;
precedence left NON;
precedence left EGAL;

/* ----------------------------Grammar Section-------------------- */

start with PROG;

PROG            ::=     PROGRAMME IDF DEBUT LISDECLF:d LINSTR:e FIN
                {: BlocDInstructions arbre = new BlocDInstructions(dleft, true);
                    arbre.ajouter(d);
                    arbre.ajouter(e);
                    RESULT = arbre; :}
        |
                PROGRAMME IDF DEBUT LISDECLF:d FIN
                {: BlocDInstructions arbre = new BlocDInstructions(dleft, true);
                    arbre.ajouter(d);
                    RESULT = arbre; :}
        |
                PROGRAMME IDF DEBUT LINSTR:e FIN
                {: BlocDInstructions arbre = new BlocDInstructions(eleft, true);
                    arbre.ajouter(e);
                    RESULT = arbre; :}
        |
                PROGRAMME IDF DEBUT FIN
                {: BlocDInstructions arbre = new BlocDInstructions(0, true);
                    RESULT = arbre; :}
                ;

LINSTR          ::=     LINSTR:li INSTR:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1);
                    b.ajouter(li);
                    b.ajouter(i);
                    RESULT =  b; :}
        |
                INSTR:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1);
                    b.ajouter(i);
                    RESULT = b; :}
                ;

INSTR           ::=     AFF:a
                {: RESULT = a; :}
        |
                ECRIRE EXPR:e POINTVIRGULE
                {: RESULT = new Ecrire(eleft + 1, e); :}

        |
                ECRIRE TCHAINE:e POINTVIRGULE
                {: RESULT = new Ecrire(eleft + 1, e); :}
        |
                CONDITION:c
                {:
                RESULT = c;
                :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new EntreeVariable(i), ileft+1); :}
        |
                BOUCLE:b
                {: RESULT = b; :}
                ;


BOUCLE          ::=     TANTQUE EXPR:e REPETER LINSTR:li FINTANTQUE
                {: BlocDInstructions b = new BlocDInstructions(lileft + 1);
                    b.ajouter(li);
                    Iteration ite = new Iteration(eleft + 1, e, b);
                    RESULT = ite; :}
                ;

AFF             ::=     IDF:i EGAL EXPR:e POINTVIRGULE
                {: RESULT = new Affectation(new EntreeVariable(i), e, ileft + 1); :}
                ;

CONDITION       ::=   SI EXPR:e ALORS LINSTR:li SINON LINSTR:le FSI
                {:
                RESULT = new Conditionnel(lileft + 1, e, li, le);
                :}
                | SI EXPR:e ALORS LINSTR:li FSI
                {:
                RESULT = new Conditionnel(lileft + 1, e, li, null);
                :}
                ;

DECL            ::=     ENTIER IDF:i POINTVIRGULE
                {: RESULT = new Declaration(new EntreeVariable(i), ileft + 1); :}
                ;


LISDECLF        ::= LISDECLF:l DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1);
                    b.ajouter(l);
                    b.ajouter(d);
                    RESULT =  b;
                :}
        |       LISDECLF:l DECL_FONCTION:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1);
                    b.ajouter(l);
                    b.ajouter(d);
                    RESULT =  b;
                :}
        |       DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1);
                   b.ajouter(d);
                   RESULT = b;
                :}
        |       DECL_FONCTION:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1);
                   b.ajouter(d);
                   RESULT = b;
                :}
                ;


LISDECL         ::=     LISDECL:l DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1);
                    b.ajouter(l);
                    b.ajouter(d);
                    RESULT =  b; :}
        |
                DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1);
                    b.ajouter(d);
                    RESULT = b;
                :}
                ;

DECL_FONCTION   ::= FONCTION IDF:i PAROUV PARFER DEBUT LINSTRF:l FIN
                {:  if (l instanceof BlocDInstructionsFonction){
                        ((BlocDInstructionsFonction) l).setName(new EntreeFonction(i,0));
                    }
                    RESULT = new DeclarationFonction(ileft + 1, new EntreeFonction(i,0), l); :}
        |
                    FONCTION IDF:i PAROUV PARAMETRESDECL:p PARFER DEBUT LINSTRF:l FIN
                        {:  if (l instanceof BlocDInstructionsFonction){
                                ((BlocDInstructionsFonction) l).setName(new EntreeFonction(i,p.size()));
                            }
                            RESULT = new DeclarationFonction(ileft + 1, new EntreeFonction(i,p.size()), l,p); :}
                ;

LINSTRF         ::= LINSTRF:li INSTRF:i
                {: BlocDInstructionsFonction b = new BlocDInstructionsFonction(ileft + 1);
                   b.ajouter(li);
                   b.ajouter(i);
                   RESULT =  b; :}
        |
               INSTRF:i
                {: BlocDInstructionsFonction b = new BlocDInstructionsFonction(ileft + 1);
                    b.ajouter(i);
                    RESULT = b ; :}
        ;

INSTRF          ::= RETOURNE EXPR:e POINTVIRGULE
                {: RESULT = new Retourne(eleft+1, e); :}
        |       SI EXPR:e ALORS LINSTRF:li SINON LINSTRF:le FSI
                {:
                    RESULT = new Conditionnel(lileft + 1, e, li, le);
                :}
        |       SI EXPR:e ALORS LINSTRF:li FSI
                {:
                    RESULT = new Conditionnel(lileft + 1, e, li, null);
                :}
        |       TANTQUE EXPR:e REPETER LINSTRF:li FINTANTQUE
                {: BlocDInstructionsFonction b = new BlocDInstructionsFonction(lileft + 1);
                    b.ajouter(li);
                    Iteration ite = new Iteration(eleft + 1, e, b);
                    RESULT = ite;
                :}
        |        AFF:a
                 {: RESULT = a; :}
        |
                ECRIRE EXPR:e POINTVIRGULE
                {: RESULT = new Ecrire(eleft + 1, e); :}
        |
                ECRIRE TCHAINE:e POINTVIRGULE
                {: RESULT = new Ecrire(eleft + 1, e); :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(new EntreeVariable(i), ileft+1); :}
                ;

PARAMETRESDECL ::= ENTIER IDF:i
                {:
                ArrayList<String> res = new ArrayList<String>();
                res.add(i);
                RESULT = res;
                :}
        |
                PARAMETRESDECL:p VIRGULE ENTIER IDF:i
                {:
                ArrayList<String> res = new ArrayList<String>();
                for(int j = 0; j < p.size();j++)
                    res.add(p.get(j));
                res.add(i);
                RESULT = res;
                :}
        ;

PARAMETRES      ::=   EXPR:i
                {:
                ArrayList<Expression> res = new ArrayList<Expression>();
                res.add(i);
                RESULT = res; :}
        |
                PARAMETRES:p VIRGULE EXPR:i
                {:
                ArrayList<Expression> res = new ArrayList<Expression>();
                for(int j = 0;j < p.size();j++)
                    res.add(p.get(j));
                res.add(i);
                RESULT = res;
                :}
        ;

EXPR            ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d); :}
        |
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |
                MOINS  EXPR:e
                {: RESULT = new MoinsUnaire(e); :}
        |
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e; :}
        |
                IDF:e
                {: RESULT = new Variable(new EntreeVariable(e), eleft+1); :}
        |       IDF:e PAROUV PARFER
                {: RESULT = new Fonction(new EntreeFonction(e,0),eleft+1); :}
        |
                IDF:e PAROUV PARAMETRES:p PARFER
                {: RESULT = new Fonction(new EntreeFonction(e,p.size()),eleft+1); :}
                ;

CSTE        ::=     CONSTANTEINT:e
                {: RESULT = new ConstanteEntiere(e, eleft+1); :}
        |       CONSTANTEBOOL:e
                {: RESULT = new ConstanteBool(e, eleft+1); :}
                ;

TCHAINE     ::=   CHAINE:e
                {: ListeChaines.getInstance().add(e);
                RESULT = e ; :}
                ;
